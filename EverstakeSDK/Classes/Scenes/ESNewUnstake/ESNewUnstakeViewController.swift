//
//  ESNewUnstakeViewController.swift
//  Pods
//
//  Created by Alexander Koziaruk on 11.12.2020.
//  Copyright (c) 2020 Noisy Miner. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SliderController


protocol ESNewUnstakeDisplayLogic: class {
    func display(viewModel: ESNewUnstake.ViewModel)
}

class ESNewUnstakeViewController: UIViewController, ESNewUnstakeDisplayLogic, SliderControllerDelegate {
    
    var interactor: ESNewUnstakeBusinessLogic?
    var router: (NSObjectProtocol & ESNewUnstakeRoutingLogic & ESNewUnstakeDataPassing)?
  
    @IBOutlet weak var steakedValueLabel: UILabel!
    @IBOutlet weak var amountTextField: UITextField!
    @IBOutlet weak var symbolLabel: UILabel!
    @IBOutlet weak var sliderContainerView: UIView!
    
    let sliderController = SliderController()
    var viewModel: ESNewUnstake.ViewModel? = nil

// MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        
        amountTextField.addDoneButtonWith(width: view.frame.width, target: self,
                                          selector: #selector(ESNewUnstakeViewController.doneButtonAction))
        sliderController.embedSliderIn(targetView: sliderContainerView,
                                       targetViewController: self)
        sliderController.setupSlider()
        sliderController.delegate = self
        
        interactor?.loadData()
    }
    
//MARK: Actions
    
    @IBAction func unstakeButtonPressed() {
        updateAmount()
        router?.unstake(amount: "\(normalizedNewAmount())")
    }
    
    @IBAction func backButtonPressed() {
        router?.back()
    }
    
    @objc func doneButtonAction() {
        amountTextField.resignFirstResponder()
        updateAmount()
    }
  
//MARK: ESNewUnstakeDisplayLogic
    
    func display(viewModel: ESNewUnstake.ViewModel) {
        self.viewModel = viewModel
        symbolLabel.text = viewModel.symbol
        steakedValueLabel.text = viewModel.displayStakedBalance
    }

//MARK: SliderControllerDelegate
    
    func sliderDidTap(atValue value: Float) {
        sliderValueDidChange(value: value)
    }
    
    func sliderValueDidChange(value: Float) {
        guard let viewModel = viewModel else { return }
        
        viewModel.amountToUnstake = viewModel.stakedBalance * Double(value)
        amountTextField.text = String(format: "%.2f", viewModel.amountToUnstake)
    }
    
    func sliderDidStartSwiping() { }
    func sliderDidEndSwiping() {  }
    
//MARK: - Private
    
    private func updateAmount() {
        viewModel?.amountToUnstake = Double(amountTextField.text ?? "0") ?? 0
        updateWithNewAmount(updateAmountLabel: false)
    }
        
    private func updateWithNewAmount(updateAmountLabel: Bool = true) {
        var val = 0 as Float
        if let viewModel = viewModel,
           viewModel.stakedBalance > 0 {
            let newAmount = viewModel.amountToUnstake
            let amount = min(newAmount, viewModel.stakedBalance)
            val = Float(amount / viewModel.stakedBalance)
            sliderController.setSlider(value: Float(val), animated: true)
        }
        if updateAmountLabel {
            sliderValueDidChange(value: val)
        }
    }
    
    func normalizedNewAmount() -> Double {
        let newAmount = Double(amountTextField.text ?? "0") ?? 0
        if let viewModel = viewModel {
            return min(newAmount, viewModel.stakedBalance)
        } else {
            return newAmount
        }
    }
}
