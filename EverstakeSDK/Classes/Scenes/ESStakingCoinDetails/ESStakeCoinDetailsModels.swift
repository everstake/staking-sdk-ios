//
//  ESStakeCoinDetailsModels.swift
//  Pods
//
//  Created by Alexander Koziaruk on 29.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum ESStakeCoinDetails {
    
    enum Action {
        case newStake
    }
  
    struct ViewModel {
        
        let title: String!
        let iconURL: URL!
        let apr: String!
        let serviceFeeMin: String!
        let serviceFeeMax: String!
        let about: String!
        let symbol: String!
        let amount: Double!
        let amountToClaim: Double!
        let validator: String!
        let isStaked: Bool!
        
        init(model: ESSharedModel.Combined) {
            title = model.coin.name
            iconURL = model.coin.iconUrl
            apr = model.coin.apr
            serviceFeeMin = model.coin.fee?.min ?? "0"
            serviceFeeMax = model.coin.fee?.max ?? "0"
            about = model.coin.about ?? ""
            symbol = model.coin.symbol ?? ""
            isStaked = model.stake != nil && model.stake!.amount > 0
            amount = model.stake?.amount ?? 0
            validator = model.stake?.validator?.name ?? ""
            amountToClaim = model.stake?.amountToClaim ?? 0
        }
        
        var displayApr: String {
            return apr + "%"
        }
        
        var displayStakedAmount: String {
            if let amount = amount,
               let symbol = symbol,
               amount > 0 {
                return "\(amount) " + symbol
            } else {
                return ""
            }
        }
        
        var displayServiceFee: String {
            if (serviceFeeMin == serviceFeeMax) {
                return serviceFeeMin + "%"
            } else {
                return serviceFeeMin + "-" + serviceFeeMax + "%"
            }
        }
        
        var displayAmountToClaim: String {
            if let amount = amountToClaim,
               let symbol = symbol,
               amount > 0 {
                return "\(amount) " + symbol
            } else {
                return ""
            }
        }
        
        var visibleCells: [ESStakeCoinDetailsDisplayDataManager.CellType] {
            
            var result = [ESStakeCoinDetailsDisplayDataManager.CellType]()
            
            result.append(.main)
            result.append(.calculator)
            
            if isStaked {
                result.append(.staked)
            }
            if amountToClaim > 0 {
                result.append(.claim)
            }
            if !about.isEmpty {
                result.append(.about)
            }

            return result
        }
    }
}
