//
//  ESStakeCoinDetailsModels.swift
//  Pods
//
//  Created by Alexander Koziaruk on 29.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum ESStakeCoinDetails {
  
    struct ViewModel {
        
        let title: String!
        let iconURL: URL!
        let apr: String!
        let serviceFeeMin: String?
        let serviceFeeMax: String?
        let about: String!
        let symbol: String!
        let amount: Double!
        let amountToClaim: Double!
        let validators: [ValidatorStake]!
        let isStaked: Bool!
        let type: ESServerModel.Coin.StakeType!
        
        init(model: ESServerModel.Combined) {
            title = model.coin.name
            iconURL = model.coin.iconUrl
            apr = model.coin.apr
            let feeArray = model.coin.validators?.map{ $0.fee ?? "0" }
            serviceFeeMin = feeArray?.min()
            serviceFeeMax = feeArray?.max()
            about = model.coin.about ?? ""
            symbol = model.coin.symbol ?? ""
            isStaked = model.stake != nil && model.stake!.amount > 0
            amount = model.stake?.amount.rounded(toPlaces: 5) ?? 0
            amountToClaim = model.stake?.amountToClaim.rounded(toPlaces: 5) ?? 0
            validators = model.stake?.validators?.asViewModelWith(symbol) ?? []
            type = model.coin.stakeType ?? .other
        }
        
        var displayApr: String {
            return apr + "%"
        }
        
        func validatorAtRow(_ row: Int) -> ValidatorStake? {
            if let startIndex = visibleCells.firstIndex(where: { $0 == .staked }) {
                return validators[row - startIndex]
            }
            return nil
        }
        
        var displayServiceFee: String {
            if let serviceFeeMin = serviceFeeMin,
               let serviceFeeMax = serviceFeeMax {
                if  (serviceFeeMin == serviceFeeMax) {
                    return serviceFeeMin + "%"
                } else {
                    return serviceFeeMin + "-" + serviceFeeMax + "%"
                }
            }
            return ""
        }
        
        var hideServiceFee: Bool {
            return serviceFeeMax == nil || serviceFeeMax! == "0"
        }
        
        var displayAmountToClaim: String {
            if let amount = amountToClaim,
               let symbol = symbol,
               amount > 0 {
                return "\(amount) " + symbol
            } else {
                return ""
            }
        }
        
        var visibleCells: [ESStakeCoinDetailsDisplayDataManager.CellType] {
            
            var result = [ESStakeCoinDetailsDisplayDataManager.CellType]()
            
            result.append(.main)
            result.append(.calculator)
            
            if isStaked {
                result.append(.stakedHeader)
                
                validators.forEach { _ in
                    result.append(.staked)
                }
            }
            if amountToClaim > 0 {
                result.append(.claim)
            }
            if !about.isEmpty {
                result.append(.about)
            }

            return result
        }
        
        var stakedHeaderTitle: String {
            return type == .manyToOne ? "List of stakes" : "Steaked"
        }
        
        var stakedCellHeaderHeight: CGFloat {
            return type == .manyToOne ? 44 : 34
        }
        
        var stakedHeaderSeparatorInset: CGFloat {
            return type == .manyToOne ? 0 : 10000
        }
        
        var stakedCellHeight: CGFloat {
            return type == .manyToOne ? 92 : 82
        }
        
        struct ValidatorStake {
            let title: String!
            let amount: String!
            let id: String!
            let symbol: String!
            let address: String!
            
            init(validator: ESServerModel.Validator, _symbol: String) {
                title = validator.name ?? ""
                amount = (validator.amount ?? "0") + " " + _symbol.uppercased()
                id = validator.id ?? ""
                address = validator.address ?? ""
                symbol = _symbol
            }
        }
    }
}

private extension Array where Element == ESServerModel.Validator {
    func asViewModelWith(_ symbol: String) -> [ESStakeCoinDetails.ViewModel.ValidatorStake] {
        return self.map { ESStakeCoinDetails.ViewModel.ValidatorStake(validator: $0, _symbol: symbol) }
    }
}
